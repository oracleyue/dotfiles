#+TITLE:    Modern IDE for Emacs using LSP
#+AUTHOR:   Zuogong Yue
#+EMAIL:    oracleyue@gmail.com
#+DATE:     20 Apr 2018
#+STARTUP:  indent
#+OPTIONS:  H:6 num:t toc:t ^:nil _:nil \n:nil LaTeX:t


The [[https://langserver.org/][language server protocol]] (LSP) was proposed by Microsoft as a way for different
editors and development environments to share language analysis backends.  This post will
configure LSP for Emacs to support code intelligence for C/C++ and Python.

*Warning*: NOT working for the newest =lsp-mode/-ui/-python= due to the updates around
Aug 2018. The packages used here are reverted back to their commits in git around June 2018.

* LSP for Emacs

In Emacs, install the required and some optional packages using for example ~M-x package-install~:

- =lsp-mode=: the main language server protocol package;
- =lsp-ui=: UI-related LSP extras, such as the sideline info, docs, flycheck, etc;
- =company-lsp=: company-backend for LSP-based code completion;

- =projectile= or =find-file-in-project=: we use a single function from here to determine
  the root directory of a project.

#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :load-path "git/lsp-mode"
    :config
    (setq lsp-project-blacklist '("^/usr/")
          lsp-highlight-symbol-at-point nil)
    (add-hook 'lsp-after-open-hook 'lsp-enable-imenu))

  (use-package lsp-ui
    :load-path "git/lsp-ui"
    :after (lsp-mode)
    :hook (lsp-mode . lsp-ui-mode)
    :config
    (setq lsp-ui-sideline-enable nil
          lsp-ui-sideline-show-symbol nil
          lsp-ui-sideline-ignore-duplicate t
          lsp-ui-doc-max-width 50
          )
    :bind (:map lsp-ui-peek-mode-map
                ("h" . lsp-ui-peek--select-prev-file)
                ("j" . lsp-ui-peek--select-next)
                ("k" . lsp-ui-peek--select-prev)
                ("l" . lsp-ui-peek--select-next-file)
                :map lsp-ui-mode-map
                ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
                ([remap xref-find-references]  . lsp-ui-peek-find-references)
                ))
#+END_SRC

Adding a backend to company:

#+BEGIN_SRC emacs-lisp
  (use-package company-lsp
    :load-path "git/company-lsp"
    :after (company lsp-mode)
    :init
    (setq company-lsp-cache-candidates nil)
    (add-hook 'lsp-mode-hook
              (lambda()
                (add-to-list (make-local-variable 'company-backends)
                             'company-lsp)))
    )
#+END_SRC


* Supporting Packages

=Flycheck= for on air coding checking:

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :defer t)

  (use-package flycheck-posframe
    :ensure t
    :after flycheck
    :config (add-hook 'flycheck-mode-hook #'flycheck-posframe-mode))
#+END_SRC


* C/C++

#+BEGIN_SRC 
  (use-package cc-mode
    :init
    (setq-default c-basic-offset tab-width)
    :bind (:map c-mode-base-map
                ("RET" . newline-and-indent))
    :config
    ;; smartparens do it
    (c-toggle-electric-state -1)
    (c-toggle-auto-newline -1)
    (setq c-tab-always-indent nil
          c-electric-flag nil)
    (dolist (key '("#" "}" "/" "*" ";" "," ":" "(" ")" "\177"))
      (define-key c-mode-base-map key nil))
    (define-key c++-mode-map "<" nil)
    (define-key c++-mode-map ">" nil)
    (sp-with-modes '(c-mode c++-mode java-mode)
      (sp-local-pair "{" nil :post-handlers '(("||\n[i]" "RET") ("| " "SPC")))
      (sp-local-pair "/*" "*/" :post-handlers '(("||\n[i]" "RET")))
      )
    )

  (use-package ccls
    :ensure-system-package ccls
    :defer 1
    :init
    (defun mage-lang-ccls-enable()
      (condition-case nil
          (lsp-ccls-enable)
        (user-error nil)))
    (add-hook 'c-mode-hook #'mage-lang-ccls-enable)
    (add-hook 'c++-mode-hook #'mage-lang-ccls-enable)
    :config
    ;; overlay is slow
    ;; Use https://github.com/emacs-mirror/emacs/commits/feature/noverlay
    (setq ccls-sem-highlight-method 'font-lock)
    (ccls-use-default-rainbow-sem-highlight)
    (setq ccls-executable "/usr/bin/ccls")
    ;;(setq ccls-extra-args '("--log-file=/tmp/cq.log"))
    (setq ccls-extra-init-params '(
                                   :completion (:detailedLabel t)
                                   :diagnostics (:frequencyMs 5000)
                                   :index (:reparseForDependency 1)))
    (with-eval-after-load 'projectile
      (progn (add-to-list 'projectile-globally-ignored-directories ".ccls-cache")
             (setq projectile-project-root-files-top-down-recurring
                   (append '("compile_commands.json"
                             ".ccls_root")
                           projectile-project-root-files-top-down-recurring))))
    )

  (use-package clang-format
    :after (ccls)
    :commands (clang-format-region clang-format-buffer))

  (use-package google-c-style
    :defer 1
    :config
    (add-hook 'c-mode-hook #'google-set-c-style)
    (add-hook 'c++-mode-hook #'google-set-c-style))

  (use-package cmake-mode
    :defer 1)

  (use-package cmake-project
    :ensure-system-package cmake
    :defer 1
    :load-path (lambda() (concat mage-ext-dir "cmake-project/"))
    :bind (("<f7>" . cp-project-build-project)
           ("<f8>" . cp-project-run)))

  (use-package modern-cpp-font-lock
    :config
    (add-hook 'c++-mode-hook #'modern-c++-font-lock-mode))
#+END_SRC


* Python

#+BEGIN_SRC emacs-lisp
  (use-package python
    :init
    (setq python-indent-guess-indent-offset-verbose nil)
    :config
    (define-key python-mode-map (kbd "DEL") nil) ; interferes with smartparens

    (setq python-shell-interpreter "ipython"
          python-shell-interpreter-args "-i --simple-prompt --no-color-info"
          python-shell-prompt-regexp "In \\[[0-9]+\\]: "
          python-shell-prompt-block-regexp "\\.\\.\\.\\.: "
          python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: "
          python-shell-completion-setup-code
          "from IPython.core.completerlib import module_completion"
          python-shell-completion-string-code
          "';'.join(get_ipython().Completer.all_completions('''%s'''))\n"))

  (use-package lsp-python
    :load-path "git/lsp-python"
    :after python
    :config
    (add-hook 'python-mode-hook #'lsp-python-enable))
#+END_SRC


* Ends

#+BEGIN_SRC emacs-lisp
  (provide 'init-lsp)
  ;; ================================================
  ;; init-lsp.el ends here
#+END_SRC
