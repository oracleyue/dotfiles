#+TITLE:    Modern C++ IDE for Emacs
#+AUTHOR:   Zuogong Yue
#+EMAIL:    oracleyue@gmail.com
#+DATE:     20 Apr 2018
#+STARTUP:  indent
#+OPTIONS:  H:6 num:t toc:t ^:nil _:nil \n:nil LaTeX:t


* Notes  for C/C++ Environments                                    :noexport:

*Warning*:
- =semantic-mode= in CEDET causes ~M-x gdb~ freeze Emacs on OSX

*Features* (using =helm=):
- use =C-c h i= to show symbol reference table
- create =.dir-local.el= to enable completion for local codes
- use helm-projectile to browse files in project
    - =C-c p a= to switch between .h, .c and .cpp
    - jump to =f= (file); =d= (directory); =b= (buffer); =e= (recent files)
    - grep in project: =C-c p g s=
    - multi-occur in project buffers: =C-c p o=
- use helm-gtags to jump via tags
    - use =C-c g c= create tags first and =C-c g u= to update
    - use =M-.= and =M-,= to jump and jump back (see more in =init-tags.el=)

*Obsolete alternatives*:
Other configurations for C++ programming environment located in
=./unmaintained/=:
- =init-cc-clang.el= : use =company-mode= and =company-clang= for completion
- =init-cc-ac.el= : use =auto-complete-mode= and =clang-complete-async=


* Modern C++ IDE for Emacs

  Features:
  - use *rtags* for code navigation (if enable by =*enable-rtags*= in =init-features.el=)
  - use *irony-mode*, *rtags* for code completion (use *company* as ac-engine)
  - integrate *flycheck* with *rtags* (disabled) and *irony*
  - use *cmake-ide* to integrate cmake-based projects
  - use *helm-make* as alternative compilation

** Requirements
*** install software in OS
1. use =pip= to install =cpplint= for *google-cpp-style*

2. have *cmake* installed

3. install *clang/LLVM*: ~brew install llvm~

4. compile *irony-server*
   - make a clean build directory
   - run ~cmake -DCMAKE_PREFIX_PATH=/usr/local/Cellar/llvm/5.0.0/ -DCMAKE_INSTALL_RPATH_USE_LINK_PATH=ON ~/.emacs.d/elpa/irony-20170828.1218/server/~
   - build and run ~make && ./bin/irony-server --version~
   - copy =./bin/irony-server= under your =.emacs.d/bin=

5. compile *rtags* servers (see RTags section)

*** install packages in emacs

  #+BEGIN_SRC emacs-lisp
    ; =====================================================
    ;; Programming Environment for C/C++ (modern)
    ; =====================================================

  #+END_SRC

  Install the additional packages to support the modern C/C++ environment.
  Since we change to use =use-package=, the following header is no longer
  needed.

  #+BEGIN_SRC
    ;; check and install essential pkgs
    (setq custom/modern-cc-packages
          '(;irony
            ;company-irony
            ;company-irony-c-headers
            ;flycheck-irony
            ;irony-eldoc
            ;cmake-ide
            ))
    ;; (when *enable-rtags*
    ;;   (setq custom/modern-cc-packages
    ;;         (append
    ;;          '(rtags
    ;;            company-rtags
    ;;            flycheck-rtags)
    ;;          custom/modern-cc-packages)))
    (custom/install-packages custom/modern-cc-packages)
  #+END_SRC

** C++ Coding styles
*** Default style for C/C++

    #+BEGIN_SRC emacs-lisp
      (require 'cc-mode)
      (setq-default c-default-style "linux")
      (setq-default c-basic-offset 4)
    #+END_SRC

*** Basic edit enhancement for C/C++
**** Auto insert pair of symbols using smartparens
     Install =smartparens= mode and enable it by ~(require 'smartparens)~, which has been enabled in =.emacs= globally.

     #+BEGIN_SRC emacs-lisp
       ;; /smartparens/: insert pair of symbols
       ;; when you press RET, the curly braces automatically add another newline
       (sp-with-modes '(c-mode c++-mode)
         (sp-local-pair "{" nil :post-handlers '(("||\n[i]" "RET")))
         (sp-local-pair "/*" "*/" :post-handlers '(("| " "SPC") ("* ||\n[i]" "RET"))))
     #+END_SRC

*** Google C++ style and its flymake checker
    Install =google-c-style= and =flymake-google-cpplint=.
    You also need to install Python package =cpplint= by =pip=.

    #+BEGIN_SRC emacs-lisp
      ;; /google-c-style/ and /flymake-google-cpplint/ style checker
      (when *enable-gg-cpp-style*
        (require 'google-c-style)
        (add-hook 'c-mode-common-hook 'google-set-c-style)
        (add-hook 'c-mode-common-hook 'google-make-newline-indent)
        (defun zyue/flymake-google-init ()
          (require 'flymake-google-cpplint)
          (setq flymake-google-cpplint-command
            (if (string-equal system-type "darwin")
                "/usr/local/bin/cpplint" "/usr/bin/cpplint"))
          (flymake-google-cpplint-load))
        (add-hook 'c-mode-hook 'zyue/flymake-google-init)
        (add-hook 'c++-mode-hook 'zyue/flymake-google-init))
    #+END_SRC

** Source code navigation using RTags
*** Install rtags servers in OS
Build and install RTags using the RTags Quickstart Guide. Alternatively install RTags using your distribution's package manager.

For OS X (due to the issues of duplicated clang's), compile as follows:
#+BEGIN_SRC sh
  git clone --recursive https://github.com/Andersbakken/rtags.git
  cd rtags
  mkdir build && cd build
  cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DCMAKE_PREFIX_PATH=/usr/local/Cellar/llvm/5.0.0/ ..
  make
#+END_SRC
Put =rdm= and =rc= under your PATH.

*** Setup rtags packages in Emacs

We could use RTags for code navigation and code completions in C/C++
projects. However, one may easily find its deficiency on code completion. Thus
we use Irony-mode for code completion.

If you also want to use RTags for code completion, we could add =company-rtags=
to the =company-backends=.

#+BEGIN_SRC emacs-lisp
  (when *enable-rtags*
    ;; see the const *enable-rtags* defined in "init-features.el"
    (use-package rtags
      :config
      ;; run rtags server automatically
      (rtags-start-process-unless-running)
      (rtags-enable-standard-keybindings)
      ;; use rtags for code completions (not recommended)
      ;; (setq rtags-autostart-diagnostics t)
      ;; (setq rtags-completions-enabled t)
      ;; (use-package company-rtags
      ;;   :config
      ;;   (push 'company-rtags company-backends))
      ;; integration with helm
      (when *use-helm*
        (setq rtags-display-result-backend 'helm))))
#+END_SRC

*** Use RTags for C/C++ projects

To use RTags for CMake-based projects, I just create a =makefile=
in the project root:

#+BEGIN_SRC sh
  cmake:
      cd ./build && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 ..
#+END_SRC

The =-DCMAKE_EXPORT_COMPILE_COMMANDS=1= makes =compile_commands.json= to be
emitted during the actual compilation. This file describes the compilation flags
for every source file. These flags are essential in helping the parser
understand what's going on.

To use RTags we need to start =rdm= and index your project.  In the build
directory I start

#+BEGIN_SRC sh
  rdm & rc -J .
#+END_SRC

For other C++ projects which aren't CMake-based, use the excellent tool =bear=
to emit the =compile_commands.json= file. It's as easy as:

#+BEGIN_SRC sh
  $ make clean
  $ bear make
#+END_SRC

*** Usages
**** Basic movements

     =C-M-f= runs forward-sexp, move forward over a balanced expression that can be a pair or a symbol.
     =C-M-b= runs backward-sexp, move backward over a balanced expression that can be a pair or a symbol.
     =C-M-k= runs kill-sexp, kill balanced expression forward that can be a pair or a symbol.
     =C-M-<SPC>= or =C-M-@= runs mark-sexp, put mark after following expression that can be a pair or a symbol.
     =C-M-a= runs beginning-of-defun, which moves point to beginning of a function.
     =C-M-e= runs end-of-defun, which moves point to end of a function.
     =C-M-h= runs mark-defun, which put a region around whole current or following function.

**** Find definitions/references in project

     =C-c-r .= runs rtags-find-symbol-at-point, which jumps to the definition of the symbol under the cursor; press again to jump between definition and declaration.

     =C-c-r ,= runs rtags-find-references-at-point, which lists all references to the symbol under the cursor.

     =C-c-r <= runs rtags-find-references, which prompts for the symbol name and finds all references.
     =C-c-r >= runs rtags-find-symbol, which prompts for symbol name and finds all references.

     =C-c r I= gets a list of rtags-extracted symbols in the current file (*helm* also provides =helm-semantic-or-imenu=)

**** Find files in project

     =C-c r ;= runs rtags-find-file, which prompts for file name to search for out of currently indexed files.

     Alternatively, this can be better accomplished with Projectile.

**** View visited tags with tag stack

     =C-c r [= rtags-location-stack-back Jumps to last visited tag.
     =C-c r ]= rtags-location-stack-forward Moves forward in location stack.

** Source code completion using Irony
*** Installations

*Mac OS X*:

Download a pre-compiled package from llvm.org to install =irony-server=.
(change the 4.0.1 version with the latest (the greatest!))

    - Download =clang+llvm-4.0.1-x86_64-apple-darwin.tar.xz= from http://llvm.org/releases/download.html

    - Extract it somewhere (e.g: =~/Programs/=) (Warning: you need to keep it on your computer to allow =irony-server= to work!)

    - make a clean build directory (e.g. ~cd ~/tmp && mkdir build && cd build~)

    - run
    #+BEGIN_SRC sh
      cmake -DCMAKE_PREFIX_PATH=/Users/oracleyue/Programs/clang+llvm-4.0.1-x86_64-apple-macosx10.9.0/ -DCMAKE_INSTALL_RPATH_USE_LINK_PATH=ON /Users/oracleyue/.emacs.d/elpa/irony-20170828.1218/server/
    #+END_SRC

    - build and run ~make && ./bin/irony-server --version~

    - cp =irony-server= to your =.emacs.d/bin/=


*Linux*:

The first time you must install the ~irony-server~ by runing the command: ~M-x
irony-install-server~. You may need to re-run it when you =libclang= get
updated.

*** Setup
Install irony-mode from MELPA and add the following to your emacs init file:

#+BEGIN_SRC emacs-lisp
  ;; /irony/+/company-irony/: code completions
  (use-package irony
    :bind (:map irony-mode-map
                ("C-c C-b" . irony-cdb-menu)
                ("C-c =" . irony-get-type))
    :after cc-mode
    :config
    (setq irony--server-executable (expand-file-name
                                      "~/.emacs.d/bin/irony-server"))
    (add-to-list 'irony-additional-clang-options "-std=c++11")
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))
#+END_SRC
*** Use Irony for C/C++ projects
Like RTags, Irony requires a compilation database. To create one, if using
=cmake=, run the following:

#+BEGIN_SRC sh
  $ cd /path/to/project/build/
  $ cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 ..
#+END_SRC

For other C++ projects which aren't CMake-based, use the excellent tool =bear=
to emit the =compile_commands.json= file. It's as easy as:

#+BEGIN_SRC sh
  $ make clean
  $ bear make
#+END_SRC

*** Integrate Irony and Irony-c-headers in Company

To integrate company-mode with Irony and add supports for C++ headers completion,
we use =company-irony= and =company-irony-c-headers= from melpa.
Put the following to your emacs init file:

#+BEGIN_SRC emacs-lisp
  (use-package company-irony
    :config
    (add-hook 'irony-mode-hook 'company-irony-setup-begin-commands)
    (setq company-backends (delete 'company-semantic company-backends))

    (use-package company-irony-c-headers
      :config
      (defun zyue/add-company-backend-irony ()
        (setq-local company-backends
                    (append '((company-irony-c-headers company-irony))
                            company-backends)))
      (add-hook 'c-mode-hook 'zyue/add-company-backend-irony)
      (add-hook 'c++-mode-hook 'zyue/add-company-backend-irony)))
#+END_SRC

*** [optional] Integrate Irony in Ivy

We could also use =ivy/counsel= for completions for Irony, if you prefer Emacs's
default ~complete-symbol~ or ~completion-at-point~ to =company-mode=.

(buggy, not working well)
#+BEGIN_SRC
  (defun add-ivy-irony-mode-hook ()
    (define-key irony-mode-map
      [remap completion-at-point] 'counsel-irony)
    (define-key irony-mode-map
      [remap complete-symbol] 'counsel-irony))
  (add-hook 'irony-mode-hook 'add-ivy-irony-mode-hook)
  (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
#+END_SRC

*** [disabled] Show eldoc for C/C++ mode via irony

Enable the minor mode =irony-eldoc=, as well as eldoc-mode. For an example,
place point on top of a symbol, or inside a function call.

#+BEGIN_SRC
  (add-hook 'irony-mode-hook #'irony-eldoc)
#+END_SRC

** Syntax checking with Flycheck
*** Prerequisites

Install =flycheck= from MELPA and add the following to your emacs init file:

#+BEGIN_SRC emacs-lisp
  ;; /flycheck/: syntax checker
  (use-package flycheck
    :config
    (add-hook 'c++-mode-hook 'flycheck-mode)
    (add-hook 'c-mode-hook 'flycheck-mode))
#+END_SRC

***  [disabled] Integrating RTags with Flycheck

To enable RTags and flycheck integration add the following to your emacs init
file:

#+BEGIN_SRC
  (use-package flycheck-rtags
    :config
    (defun zyue/flycheck-rtags-setup ()
      (flycheck-select-checker 'rtags)
      ;; RTags creates more accurate overlays.
      (setq-local flycheck-highlighting-mode nil)
      (setq-local flycheck-check-syntax-automatically nil))
    (add-hook 'c-mode-common-hook #'zyue/flycheck-rtags-setup))
#+END_SRC

*** Integrating Irony with Flycheck

We use =flycheck-irony= from MELPA to perform syntax checking via =irony=:

#+BEGIN_SRC emacs-lisp
  ;; /flycheck-irony/ using /irony/
  (use-package flycheck-irony
    :requires flycheck
    :config
    (eval-after-load 'flycheck
      '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup)))
#+END_SRC

*** Keybindings

- =C-c ! n= and =C-c ! p=: jump to next or previous errors
- =C-c ! l=: list errors
- =C-c ! c=: menually run checker

** CMake automation with cmake-ide (disabled)
*** Prerequisites

    Install cmake-ide from MELPA and add the following to your emacs init file:
    #+BEGIN_SRC
      (use-package cmake-ide
        :config
        (cmake-ide-setup))
    #+END_SRC

*** Using cmake-ide

    To have cmake-ide automatically create a compilation commands file in your project root create a =.dir-locals.el= containing the following:
    #+BEGIN_SRC
      ((nil . ((cmake-ide-build-dir . "<PATH_TO_PROJECT_BUILD_DIRECTORY>"))))
    #+END_SRC

    You can now build your project using ~M-x cmake-ide-compile~. Additionally, cmake-ide will automatically update your RTags index as well.

** More supports for C/C++ programming
*** Symbol reference tables via function-args

=function-args= showing an inline arguments hint for the C/C++ function at
point. We particularly use the following two functions: ~moo-jump-local~ and
~moo-jump-directory~, which show a summary/table of C/C++ symbols.

(See https://github.com/abo-abo/function-args for more features. However, I
personally do not use them.)

#+BEGIN_SRC emacs-lisp
  ;; /function-args/: C/C++ symbol reference tables
  ;; usages:
  ;;   =moo-jump-local= "C-M-j", =moo-jump-directory= "C-M-k"
  (when (and *enable-function-args* *enable-semantics*)
    (use-package function-args
      :requires ivy
      :config
      ;; enable case-insensitive searching
      (set-default 'semantic-case-fold t)
      ;; set selection interface
      (if *use-helm*
          (setq moo-select-method 'helm)  ;; ivy, helm, helm-fuzzy
        (setq moo-select-method 'ivy))
      ;; enable function-args
      (add-hook 'c-mode-hook 'fa-config-default)
      (add-hook 'c++-mode-hook 'fa-config-default)
      ;; semantic refresh: "M-x semantic-force-refresh"
      ;; restore default keybindings
      ;; "M-u": fa-abort; "M-o": moo-complete
      (define-key function-args-mode-map (kbd "M-u") 'upcase-word)
      (define-key function-args-mode-map (kbd "M-o") 'open-previous-line)))
#+END_SRC

*** Major modes to edit CMake files

#+BEGIN_SRC emacs-lisp
  (use-package cmake-mode
    ;; /cmake-mode/: cmake-mode.el
    :load-path "~/.emacs.d/git/"
    :config
    ;; /cmake-font-lock/: to add more fontifying features
    (use-package cmake-font-lock
      :load-path "~/.emacs.d/git/cmake-font-lock"
      :config
      (autoload 'cmake-font-lock-activate "cmake-font-lock" nil t)
      (add-hook 'cmake-mode-hook 'cmake-font-lock-activate))
    ;; adding /company-cmake/ for ac-complete
    (add-to-list 'company-dabbrev-code-modes 'cmake-mode)
    (defun zyue/company-cmake-setup ()
      (setq-local company-backends
                  (append '((company-cmake company-dabbrev-code))
                          company-backends)))
    (add-hook 'cmake-mode-hook 'zyue/company-cmake-setup)
    ;; compilation setup for cmake-mode
    (add-hook 'cmake-mode-hook
              (lambda ()
                (setq compile-command "cd build/ && cmake .. && make")
                (define-key cmake-mode-map (kbd "C-c C-c") 'compile))))
#+END_SRC

*** Compilation supports via helm-make

One may use =helm-make= package to run makefile.  To compile the whole project,
use =C-c p c= (=helm-make-projectile=); otherwise, simple run =M-x helm-make= or
=M-x compile=.
#+BEGIN_SRC emacs-lisp
  ;; Compile commands in c/c++ and makefile modes using helm-make
  (use-package helm-make
    :bind (("C-c p c" . helm-make-projectile)
           :map c-mode-base-map
           ("C-c C-c" . helm-make)
           :map makefile-gmake-mode-map   ;; makefile in Linux
           ("C-c C-c" . helm-make)
           :map makefile-bsdmake-mode-map ;; makefile in BSD
           ("C-c C-c" . helm-make)))
#+END_SRC

If the Makefile is in different directories, e.g. created by *cmake*, we need to
specify the location of =Makefile=. =.dir-locals.el= file is needed for this
purpose. =.dir-locals.el= should be placed in project root. The file content
looks like this:

#+BEGIN_SRC
  ((c++-mode (helm-make-build-dir . "build/")))
#+END_SRC
Due to the local variable settings, Emacs will ask if the variable =helm-make-build-dir= is safe. Put the configuration in init file to prevent it.
#+BEGIN_SRC
  (put 'helm-make-build-dir 'safe-local-variable 'stringp)
#+END_SRC

*** Major modes for doxygen documentations (disabled)
To use =doxymacs=, setup the following in your init file:

#+BEGIN_SRC
  ;; /doxymacs/ to manipulate doxygen documentations
  (add-to-list 'load-path "~/.emacs.d/git/doxymacs-1.8.0")
  (require 'doxymacs)
  (add-hook 'c-mode-common-hook 'doxymacs-mode)
  ; fontify the doxygen keywords
  (defun my-doxymacs-font-lock-hook ()
    (if (or (eq major-mode 'c-mode) (eq major-mode 'c++-mode))
        (doxymacs-font-lock)))
  (add-hook 'font-lock-mode-hook 'my-doxymacs-font-lock-hook)
#+END_SRC

** Ends

#+BEGIN_SRC emacs-lisp
  (provide 'init-cc)
  ;; ================================================
  ;; init-cc.el ends here
#+END_SRC
