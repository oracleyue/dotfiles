#+TITLE:    The Family Box of Packages by abo-abo
#+AUTHOR:   Zuogong Yue
#+EMAIL:    oracleyue@gmail.com
#+DATE:     01 May 2018
#+STARTUP:  indent
#+OPTIONS:  H:6 num:t toc:t ^:nil _:nil \n:nil LaTeX:t


* Ivy - a generic completion frontend (swiper, counsel, etc.)

** Requirements
*** Install system commandline tools

Tools to be installed in order to use the corresponding commands in Ivzyue/
(package names in Homebrew)

- ~counsel-ag~  : ~ag~ from =the_silver_searcher=
- ~counsel-ack~ : ~ack~ from =ack=
- ~counsel-rg~  : ~rg~ from =ripgrep=
- ~counsel-git~ : ~git~
- ~counsel-fzf~ : ~fzf~ (a command-line fuzzy finder)

*** Install packages for Emacs

  #+BEGIN_SRC emacs-lisp
    ;; ===============================================================
    ;; Ivy - a generic completion mechanism for Emacs
    ;; ===============================================================
    ;; Last modified on 31 Mar 2018


    ;; Install required Emacs packages
    (setq custom/ivy-ext-packages
          '(ivy
            counsel
            swiper
            wgrep
            counsel-projectile
            counsel-gtags))
    (custom/install-packages custom/ivy-ext-packages)
  #+END_SRC

** Ivy, Counsel and Swiper

List of frequent commands:

- grep buffers:
  - ~swiper~ or ~counsel-grep-or-swiper~ (large files) (=C-s=)
  - ~swiper-all~ (=M-g s=) grep all buffers
  - ~swiper-multi~ grep the selected buffers
- grep directory (recursively):
  - ~counsel-ag~ (=M-g a=)
  - ~counsel-ack~
  - ~counsel-rg~ (=M-g r=) (for large files)
- grep git projects:
  - ~counsel-git~ (=C-c g=) (select a file tracked by git)
  - ~counsel-git-grep~ or use ~counsel-rg~ instead
- find files in directory recursively ~counsel-fzf~ (=M-g f=)

*** Basics
#+BEGIN_SRC emacs-lisp
  ;; ---------------------------------------------
  ;; /Ivy + Counsel + Swiper/: by abo-abo
  ;; ---------------------------------------------

  ;; Configurations
  (ivy-mode 1)
  (setq ivy-height 15)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  (setq ivy-use-selectable-prompt t)  ;; make inputs selectable
#+END_SRC

*** Keybindings

Ivy-based interface to standard commands:
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-s") 'swiper)  ;; or use counsel-grep-or-swiper
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "<f1> l") 'counsel-find-library)
  (global-set-key (kbd "<f2> k") 'counsel-descbinds)
  (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  (global-set-key (kbd "C-c C-r") 'ivy-resume)
#+END_SRC


Ivy-based interface to basic editing and programming
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-y") 'counsel-yank-pop)
  (global-set-key (kbd "M-g SPC") 'counsel-mark-ring)  ;; M-SPC
  (global-set-key (kbd "M-g i") 'counsel-semantic-or-imenu) ;; C-c i
#+END_SRC

Ivy-based interface to shell and system tools:
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c g") 'counsel-git)
  ;; (global-set-key (kbd "C-c j") 'counsel-git-grep)  ;; replaced by counsel-rg
  (global-set-key (kbd "M-g C-s") 'swiper-all)
  ;; alternative ~swiper~ for large files
  ;; (global-set-key (kbd "M-g s") 'counsel-grep-or-swiper)
  (global-set-key (kbd "M-g s") 'counsel-grep)
  (setq counsel-grep-base-command
   "rg -i -M 120 --no-heading --line-number --color never '%s' %s")
  (global-set-key (kbd "M-g a") 'counsel-ag)    ;; C-c k
  ;; (global-set-key (kbd "M-g k") 'counsel-ack)
  (global-set-key (kbd "M-g r") 'counsel-rg)    ;; large files
  (global-set-key (kbd "M-g f") 'counsel-fzf)   ;; helm-find
  ;; (global-set-key (kbd "M-g l") 'counsel-locate)  ;; C-x l
#+END_SRC

*** Minibuffer actions

One may go to the INFO page (=C-h i=) of Ivy to see the complete manual.
The recommended setting of additional minibuffer actions:
#+BEGIN_SRC emacs-lisp
  (define-key minibuffer-local-map (kbd "C-r")
    'counsel-minibuffer-history)
  ;; ensure recentf-list loaded on startup
  (with-eval-after-load 'counsel (recentf-mode))
  ;; disable recentf-list loading via ivy-switch-buffer
  ;; (setq recentf-initialize-file-name-history nil)
#+END_SRC
(For these two additional settings, see https://github.com/abo-abo/swiper/issues/1515.)

Customization to restore a few =helm= actions:
#+BEGIN_SRC (!not working)
  (define-key minibuffer-local-map (kbd "C-o")
    'ivy-beginning-of-buffer)
#+END_SRC

A brief summary of minibuffer actions in ~counsel-find-files~:
-  =C-j=: start a new completion; otherwise, same as =RET=;
-  =TAB=: attempts partial completion; =TAB TAB= same as =C-j=;
-  =C-M-j=: exits with the current input instead of candidates;
-  =M-i=: insert the current candidate into the minibuffer;
-  =M-o=: presents valid actions;
-  =M-n=, =M-p=: cycles through the Ivy command history;
-  =S-SPC=: deletes the current input and rests the list.

A summary of file name completions:
- =C-j= (~ivy-alt-done~):
    On a directory, restarts completion from that directory.
    On a file or ./, exit completion with the selected candidate.
- =DEL= (~ivy-backward-delete-char~): Restart the completion in the parent
  directory if current input is empty.
- =//= (~self-insert-command~):
    Switch to the root directory.
- =~= (~self-insert-command~):
    Switch to the home directory.
- =/= (~self-insert-command~): If the current input matches an existing
  directory name exactly, switch the completion to that directory.
- =M-r= (~ivy-toggle-regexp-quote~):
    Toggle between input as regexp or not.
    Switch to matching literally since file names include ., which is for matching any char in regexp mode.

*** Feature configurations
Exclude boring files like =.DS_Store= in ~counsel-find-file~:
#+BEGIN_SRC emacs-lisp
  (setq counsel-find-file-ignore-regexp "\\.DS_Store\\'")
#+END_SRC

*** Ivy-occur and available actions

The bug is due to the incompatibility of commandline tools on OSX and Linux, for
example =xargs -d '\n'=, =-d= is not available on OSX.

#+BEGIN_SRC emacs-lisp
  (when *is-mac*
    (setq counsel-find-file-occur-cmd
          "gls -a | grep -i -E '%s' | tr '\\n' '\\0' | xargs -0 gls -d --group-directories-first"))
#+END_SRC


A summary of commands in the read-only =ivy-occur= buffer:
(WARNING: has been changed and no longer working!)
-  =RET= or =f= (~ivy-occur-press~):
    call the current action on the selected candidate.
-  =mouse-1= (~ivy-occur-click~);
    call the current action on the selected candidate.
-  =j= (~next-line~): move to next line.
-  =k= (~previous-line~): move to previous line.
-  =a= (~ivy-occur-read-action~):
    read an action and make it current for this buffer.
-  =o= (~ivy-occur-dispatch~):
    read an action and call it on the selected candidate.
-  =q= (~quit-window~): bury the current buffer.

*** Advanced features of ripgrep and counsel-rg

(source: https://oremacs.com/2018/03/05/grep-exclude/)

The main two commands in ivy that I use for Git are:
-  ~counsel-git~: select a file tracked by Git
-  ~counsel-rg~: grep for a line in all files tracked by Git, using =ripgrep= as
  the backend.

Among the available grep tools, ~counsel-rg~ is the fastest, especially when we
have to deal with Git repositories that more than 1GB in size. Moreover, adding
an =.ignore= file to the root of your project can really speed up your
searches. In my sample project, I went from 10k files to less than 500 files.

Example of =.ignore= files:
#+BEGIN_EXAMPLE
  /TAGS
  ,*.min.js*
  /Build/Output/
  /ThirdParty/
#+END_EXAMPLE

As you can see, both file patterns and directories are supported. One other
nifty thing that I discovered only recently is that you can use =ripgrep= as the
backed for ~counsel-git~ in addition to ~counsel-rg~. Which means the same
=.ignore= file is used for both commands. Here's the setting:

#+BEGIN_SRC emacs-lisp
  (setq counsel-git-cmd "rg --files")
#+END_SRC

And here's the setting for ~counsel-rg~:

#+BEGIN_SRC emacs-lisp
  (setq counsel-rg-base-command
        "rg -i -M 120 --no-heading --line-number --color never %s .")
#+END_SRC

The main difference in comparison to the default =counsel-rg-base-command= is
=-M 120= which means: truncate all lines that are longer than 120
characters. This is really helpful when Emacs is accepting input from =ripgrep=: a
megabyte long line of minified JS is not only useless since you can't see it
whole, but it will also likely hang Emacs for a while.

*** Refactoring workflow via ivy-occur

The basic idea was that he wanted to change all occurrences of an identifier in
all files in a given directory. We do that by finding each occurrence with
=rgrep=, making the =rgrep= result buffer writable with =wgrep=, then using
=iedit= to change all occurrences at once.

The workflow is summarized as follows:
- run ~counsel-ag~  (or ~counsel-rg~  etc.) and call ~ivy-occur~ (=C-c C-o=)
- in the occur buffer, toggle =wgrep= by =C-x C-q= (~ivy-wgrep-change-to-wgrep-mode~)
- use =iedit= (=C-;=) for example to change all occurences
- exit =iedit= (=C-;=) and =wgrep= (=C-x s= or =C-c C-c=) (~wgrep-finish-edit~)
- kill the occur buffer after confirmation

Sources:
- https://sam217pa.github.io/2016/09/11/nuclear-power-editing-via-ivy-and-ag/
- https://oremacs.com/2015/01/27/my-refactoring-workflow/
- http://irreal.org/blog/?p=6008

** Ivy for projectile

#+BEGIN_SRC emacs-lisp
  ;; ---------------------------------------------
  ;; /counsel-projectile/: Ivy for projectile
  ;; ---------------------------------------------
  (counsel-projectile-mode)
#+END_SRC

One may go to =~/.emacs.d/init/readme/= to see more the complete manual (the
README.md from the author's github project)

The most frequent used operations:
-  =C-c p p=: switch project
-  =C-c p f=: jump to a project file
-  =C-c p d=: jump to a project directory
-  =C-c p b=: jump to a project buffer
-  =C-c p s g=: search project with grep
-  =C-c p s s=: serach project with ag

-  =C-c p SPC=: jump to a project buffer, file, or switch project
-  =C-c p s r=: search project with rg
-  =C-c p O=:   Org-capture into project

** Ivy for GNU global tags

Enable =gtags= for the given major modes:
#+BEGIN_SRC emacs-lisp
  ;; ---------------------------------------------
  ;; /counsel-gtags/: Ivy for gtags (GNU global)
  ;; ---------------------------------------------
  (add-hook 'c-mode-hook 'counsel-gtags-mode)
  (add-hook 'c++-mode-hook 'counsel-gtags-mode)
  (add-hook 'python-mode-hook 'counsel-gtags-mode)
#+END_SRC

Keybindings:
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'counsel-gtags
    ;; basic jumps
    (define-key counsel-gtags-mode-map (kbd "M-.") 'counsel-gtags-dwim)
    (define-key counsel-gtags-mode-map (kbd "M-,") 'counsel-gtags-go-backward)
    (define-key counsel-gtags-mode-map (kbd "M-t") 'counsel-gtags-find-definition)
    (define-key counsel-gtags-mode-map (kbd "M-r") 'counsel-gtags-find-reference)
    (define-key counsel-gtags-mode-map (kbd "M-s") 'counsel-gtags-find-symbol)
    ;; create/update tags
    (define-key counsel-gtags-mode-map (kbd "C-c g c") 'counsel-gtags-create-tags)
    (define-key counsel-gtags-mode-map (kbd "C-c g u") 'counsel-gtags-update-tags)
    ;; jump over stacks/history
    (define-key counsel-gtags-mode-map (kbd "C-c g [") 'counsel-gtags-go-backward)
    (define-key counsel-gtags-mode-map (kbd "C-c g ]") 'counsel-gtags-go-forward))
#+END_SRC



* Hydra - make Emacs bindings that stick around

This is a package for GNU Emacs that can be used to tie related commands into a
family of short bindings with a common prefix - a Hydra.

#+BEGIN_SRC
  ;; Install Hydra package
  (setq custom/hydra-packages
        '(hydra
          ivy-hydra))
  (custom/install-packages custom/hydra-packages)
#+END_SRC

** Supports for Counsel

It requires the package =ivy-hydra=, which defines the =hydra= rules for
=counsel=.

A summary of =hydra= commands available for =counsel=:
- use =C-o= (~hydra-ivy/body~) to invokes the hydra menu with short key
  bindings.
- when Hydra is active, minibuffer editing is disabled and menus display short
  aliases:

| Short | Normal    | Command name              |
|-------+-----------+---------------------------|
| =o=   | =C-g=     | ~keyboard-escape-quit~    |
| =j=   | =C-n=     | ~ivy-next-line~           |
| =k=   | =C-p=     | ~ivy-previous-line~       |
| =h=   | =M-<=     | ~ivy-beginning-of-buffer~ |
| =l=   | =M->=     | ~ivy-end-of-buffer~       |
| =d=   | =C-m=     | ~ivy-done~                |
| =f=   | =C-j=     | ~ivy-alt-done~            |
| =g=   | =C-M-m=   | ~ivy-call~                |
| =u=   | =C-c C-o= | ~ivy-occur~               |

Hydra menu offers more additional bindings:
-  =c= (~ivy-toggle-calling~)
  Toggle calling the action after each candidate change. It modifies j to jg, k to kg etc.
-  =m= (~ivy-rotate-preferred-builders~)
  Rotate the current regexp matcher.
-  =>= (~ivy-minibuffer-grow~)
  Increase ivy-height for the current minibuffer.
-  =<= (~ivy-minibuffer-shrink~)
  Decrease ivy-height for the current minibuffer.
-  =w= (~ivy-prev-action~)
  Select the previous action.
-  =s= (~ivy-next-action~)
  Select the next action.
-  =a= (~ivy-read-action~)
  Use a menu to select an action.
-  =C= (~ivy-toggle-case-fold~)
  Toggle case folding (match both upper and lower case characters for lower case input).


* Avy - jump to things in Emacs tree-style

Avy is a GNU Emacs package for jumping to visible text using a char-based
decision tree.


* END

#+BEGIN_SRC emacs-lisp
  (provide 'init-ivy)
  ;; ================================================
  ;; init-ivy.el ends here
#+END_SRC
