(custom-set-variables
 '(column-number-mode t)
 '(fill-column 80)
 '(inhibit-startup-screen t)
 ;'(linum-format " %d ")   ;; '(linum-format "%4d \u2502 ")
 '(matlab-shell-command-switches (quote ("-nodesktop -nosplash")))
 ;; '(org-file-apps (quote ((auto-mode . emacs) ("\\.mm\\'" . default) ("\\.x?html?\\'" . "firefox %s") ("\\.pdf\\'" . "evince %s"))))
 '(org-file-apps (quote ((auto-mode . emacs) ("\\.mm\\'" . default) ("\\.x?html?\\'" . "open %s") ("\\.pdf\\'" . "open %s"))))
 '(scroll-bar-mode nil)
 '(show-paren-mode t)
 '(tab-stop-list (quote (4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 84 88 92 96 100 104 108 112 116 120)))
 '(tool-bar-mode nil))

(custom-set-faces
 ;'(default ((t (:family "DejaVu Sans Mono" :height 130))))  ;; 125, 130
 '(default ((t (:font "DejaVu Sans Mono-13"))))   ;; 13  ;10.5 in Thinpad
 ;; Note that set the font-size of fixed-pitch different from 'default will cause troubles on auto-completion when enabling linum-mode.
 ;; '(fixed-pitch ((t (:family "DejaVu Sans Mono"))))
 ;; mode-line with smaller font size
; '(mode-line ((t (:font "DejaVu Sans Mono-12"))))
; '(mode-line-inactive ((t (:font "DejaVu Sans Mono-12"))))
 '(iedit-occurrence ((t (:inherit lazy-highlight))))
 '(highlight-indent-face ((t (:inherit highlight))))   ;; face for /highlight-indentation/ in /emacs-for-python/
 )
;; Frame size
(add-to-list 'default-frame-alist '(width . 100))
(when window-system (set-frame-size (selected-frame) 100 36))  ;31 in Thinkpad


;;
;; version settings
;;
(setq ecb-options-version "2.40")
(setq magit-last-seen-setup-instructions "1.4.0") ;disable magit version message


;;
;; global variables for configuration loading
;;
(setq y-init-path-prefix "~/.emacs.d/init/")
;; feature control
(if (string-equal system-type "darwin")
    (progn 
      (setq y:flags "yes")
      (setq y-enable-semantic-parse y:flags)     ; for /helm-sematic-or-imenu/
      (setq y-enable-function-args-flag y:flags)  ; for /function-args/
      (setq y-enable-cedet-source-info y:flags))  ; for /cedet-source-info/
  (setq y-enable-semantic-parse "yes")
  (setq y-enable-function-args-flag "yes")
  (setq y-enable-cedet-source-info "yes"))


;;
;; ---------- Settings of Emacs Package System -------------
;;
;; Loading packages installed by /homebrew/
(when (string-equal system-type "darwin")
  (let ((default-directory "/usr/local/share/emacs/site-lisp/"))
  (normal-top-level-add-subdirs-to-load-path)))
;; For Package Management by ELPA
(when (>= emacs-major-version 24)
    (require 'package)
    (package-initialize)
    ;; Any add to list for package-archives (to add marmalade or melpa) goes here
    ;; (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
    ;; (add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
    (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
    (add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)
    )
;;; ---------------------------------------------------------

;;
;; Load basic configurations for Emacs
;;
(load (concat y-init-path-prefix "emacs-init-basics"))

;;
;; -------------------- Settings of Modes -----------------------
;;
;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;; Fixing for /Dired/ in osx
(cond 
 ((string-equal system-type "darwin")
  (setq insert-directory-program "/usr/local/bin/gls")
  ;(setq dired-use-ls-dired nil)
  (setq dired-listing-switches "-ahl --color=always --group-directories-first")
  ))
(add-hook 'dired-load-hook
          (lambda ()
            (load "dired-x")
            (setq dired-omit-files "^\\.?#\\|^#.*\\|\\.DS_Store$")
            (setq dired-omit-extensions (delete ".o" dired-omit-extensions))))
(add-hook 'dired-mode-hook
          (lambda ()
            (dired-omit-mode 1)))

;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;; Matching a pair of braces and hightlight the contents
(show-paren-mode t)
;; (setq show-paren-style 'expression)
(add-to-list 'load-path "~/.emacs.d/git")
(require 'hl-sexp)
  (add-hook 'lisp-mode-hook 'hl-sexp-mode)
  (add-hook 'emacs-lisp-mode-hook 'hl-sexp-mode)
  (add-hook 'matlab-mode-hook 'hl-sexp-mode)
  (add-hook 'python-mode-hook 'hl-sexp-mode)
  (add-hook 'c-mode-common-hook 'hl-sexp-mode)
  (add-hook 'sh-mode-hook 'hl-sexp-mode)


;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;; Minior modes (yas, auto-complete, popup) for completion
(load (concat y-init-path-prefix "emacs-init-ac"))


;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;; /Fill-Column-Indicator/ Bugs in org-mode: adding extra symbols at line ends
; (add-to-list 'load-path "~/.emacs.d/fill-column-indicator-1.83")
; (require 'fill-column-indicator)
; (define-globalized-minor-mode
;    global-fci-mode fci-mode (lambda () (fci-mode 1)))
; (add-hook 'python-mode-hook 'fci-mode)

;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;;; Insert Parenthesis/Brackets by /Pair/
;(electric-pair-mode 1)
;; make electric-pair-mode work on more brackets
;(defvar y-electric-pair-pairs '(
;                                (?\" . ?\")
;                                (?\{ . ?\})
;                                        ; (?\< . ?\>)
;                                        ; (?\' . ?\')
;                                        ; (?\$ . ?\$)
;                                ))
;(setq-default electric-pair-pairs (append electric-pair-pairs y-electric-pair-pairs))
;;
;;replaced advanced pkg: /smartparens/
;;
(require 'smartparens-config)
(show-smartparens-global-mode +1)
(smartparens-global-mode 1)


;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;;; Enable /linum/ in nlinum lib
;; [!!WARNING]: it causes org-mode extremely slow when jumping between thousands of lines by Level N headlines.
;;; (global-linum-mode 1)  ; linum-mode causes many bugs
;; align line numbers to the right + padding
(defun linum-format-func (line)
  (let ((w (length (number-to-string (count-lines (point-min) (point-max))))))
     (propertize (format (format " %%%dd " w) line) 'face 'linum)))
(setq linum-format 'linum-format-func)
;; enable linum-mode
;(add-hook 'emacs-lisp-mode-hook 'linum-mode)
(add-hook 'sh-mode-hook 'linum-mode)
(add-hook 'matlab-mode-hook 'linum-mode)
(add-hook 'python-mode-hook 'linum-mode)
(add-hook 'c-mode-common-hook 'linum-mode)
(add-hook 'makefile-gmake-mode-hook 'linum-mode) ; default mode for makefile in gnome
(add-hook 'makefile-bsdmake-mode-hook 'linum-mode) ; default mode for makefile in OS X 
 
;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;; Settings for /bash-completion/: TAB complete alias and functions
(require 'bash-completion)
(bash-completion-setup)

;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;; /multiple-cursors/: edit with multiple cursors
(require 'multiple-cursors)
;; mark many occurrences in region
(global-set-key (kbd "C-S-l C-S-l") 'mc/edit-lines)  ;; default (C-S-c C-S-c)
;; mark one more occurrence by regexp match
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
;; mouse events
(global-set-key (kbd "C-S-<mouse-1>") 'mc/add-cursor-on-click)
;; specials
(global-set-key (kbd "M-S-SPC") 'set-rectangular-region-anchor)
;; fix "C-j" for AucTeX mode
(global-set-key (kbd "C-S-j") 'electric-newline-and-maybe-indent)

;; /expand-region/: increase the selected region by semantic units
(require 'expand-region)
(global-set-key (kbd "C-=") 'er/expand-region)

;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;; Setting for /golden-ratio/
(require 'golden-ratio)
(golden-ratio-mode t)
(setq golden-ratio-auto-scale t) 

;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;; Setting for /Helm/ and plus
(load (concat y-init-path-prefix "emacs-init-helm"))
(load (concat y-init-path-prefix "emacs-init-helm-swoop"))
;; using tuhdo's config
;(load (concat y-init-path-prefix "emacs-init-cc-tuhdo"))




;;
;; Configurations for Programming Environment
;;

;; General Supports for Programming:
;; 
; =======================================
;; Version Control by /Magit/
(global-set-key (kbd "C-c h g") 'magit-status)

; =======================================
;; Project Management by /projectile/ and helm addons
(load (concat y-init-path-prefix "emacs-init-helm-proj"))

; =======================================
;; Tag Support
;; Note: tag support for C/C++ has been loaded in "emacs-init-cc.el"

; =======================================
;; API Reference Support
;; Integration with /Dash/ for quick refernce (only available for Mac OS X)
(when (string-equal system-type "darwin") 
  (require 'dash-at-point)
  (global-set-key (kbd "C-c d") 'dash-at-point) ; default "C-c d", conflicts with /doxyemacs/ and /ropemacs/ rope-show-doc (having been disabled in its python sources)
  ;; (global-set-key "\C-ce" 'dash-at-point-with-docset)
  ; specify docsets to search in different modes
  (set 'dash-at-point-mode-alist
       '((c-mode . "c,gsl,gl4")
         (c++-mode . "cpp,eigen,boost,gsl")
         (python-mode . "python,numpy,scipy,matplotlib,pandas")
         (ess-mode . "r")
         (sh-mode . "bash")
         )))
;; Integration with /Zeal/ for quick refernce (available for Linux)
(when (string-equal system-type "gnu/linux")
  (require 'zeal-at-point)
  (global-set-key (kbd "C-c d") 'zeal-at-point)
  (set 'dash-at-point-mode-alist
       '((c-mode . "c,gsl,gl4")
         (c++-mode . "c++,eigen,boost,gsl")
         (python-mode . "python 2,numpy,scipy,matplotlib,pandas")
         (ess-mode . "r")
         )))

; =======================================
;; Debugging Support by /GUD/: gdb, pdb
;; - usages: "M-x pdb", "M-x gud-gdb"
;;           "M-x gdb" then "M-x gdb-many-window", then "b main" "r"
;; - notes: keybindings compatible with JetBrains
(when (string-equal system-type "darwin")
  (setq gdb-non-stop-setting nil))
(global-set-key (kbd "<f7>") 'gud-step);; equiv step in
(global-set-key (kbd "<f8>") 'gud-next) ;; equiv step over
(global-set-key (kbd "<f9>") 'gud-cont) ;; equiv continue
(global-set-key (kbd "S-<f8>") 'gud-finish) ;; equiv step out 


;; Environments for Programming Languages:
;;
; =======================================
;; Programming Environment for /Lisp/
; To make "C-x C-e" pretty-print; output is shown in minibuffer
(global-set-key [remap eval-last-sexp] 'pp-eval-last-sexp)
; To make "M-:" pretty-print; both input and output are in minibuffer
(global-set-key [remap eval-expression] 'pp-eval-expression)
; Use "C-j" in *scratch*; output is in the buffer under the sexp
;; ------
;; use /ParEdit/ mode
;(autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
;(add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
;(add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
;(add-hook 'ielm-mode-hook             #'enable-paredit-mode)
;(add-hook 'lisp-mode-hook             #'enable-paredit-mode)
;(add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
;(add-hook 'scheme-mode-hook           #'enable-paredit-mode)

; =======================================
;; Programming Environment for /HTML, js/
;; candidates: js2-mode, web-mode, emmet-mode

; =======================================
;; Programming Environment for /C C++/
(load (concat y-init-path-prefix "emacs-init-cc"))
;(load (concat y-init-path-prefix "emacs-init-cc-test"))
;; Enable to fire "C-c C-c" to compile, when in cc-mode buffers
;; OR use projectile compile "C-c p c"
(defun y:set-compile-command ()
  (set (make-local-variable 'compile-command) "cd .. && make -k && cd -"))
(add-hook 'c-mode-hook 'y:set-compile-command)
(add-hook 'c++-mode-hook 'y:set-compile-command)

; =======================================
;; Programming Environment for /Python/
(load (concat y-init-path-prefix "emacs-init-py"))

; =======================================
;; Programming Environment for /R/
(require 'ess-site)

; =======================================
;; Programming Environment for /MATLAB/
(require 'matlab)
(autoload 'matlab-mode "matlab" "Matlab Editing Mode" t)
(add-to-list 'auto-mode-alist '("\\.m$" . matlab-mode))
(setq matlab-indent-function t)
(setq matlab-shell-command "/usr/local/bin/matlab")
(load-library "matlab-load")
;; Enable CEDTE feature support for MATLAB code
;(matlab-cedet-setup)

; =======================================
;; Programming Environment for /AppleScript/
(autoload 'applescript-mode "applescript-mode"
  "Major mode for editing AppleScript source." t)
(add-to-list 'auto-mode-alist '("\\.applescript$" . applescript-mode))

; =======================================
;; Editing Mode for /Markdown/
(autoload 'markdown-mode "markdown-mode"
  "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode))
; configure markdown
(setq markdown-command "/usr/local/bin/multimarkdown")
(add-hook 'markdown-mode-hook (lambda()
    (add-to-list 'markdown-css-paths "/Users/oracleyue/.default-css/style.css")
    (add-to-list 'markdown-css-paths "/Users/oracleyue/.default-css/bootstrap.min.css")
    (add-to-list 'markdown-css-paths "/Users/oracleyue/.default-css/bootstrap-responsive.min.css")
    ;; (add-to-list 'markdown-css-paths "/Users/oracleyue/.default-css/style-2.css")
    ;; (add-to-list 'markdown-css-paths "/Users/oracleyue/.default-css/bootstrap.min-2.css")
))
;; Preview using /livedown.el/
(require 'livedown)
(setq livedown:autostart nil) ; automatically open preview when opening markdown files 
(setq livedown:open t)        ; automatically open the browser window
(setq livedown:port 1337)     ; port for livedown server
; use livedown to preview markdown
(add-hook 'markdown-mode-hook (lambda()
          (define-key markdown-mode-map (kbd "C-c C-c") 'livedown:preview)
          ))
;; (global-set-key (kbd "C-c C-S-o") 'livedown:preview)

; =======================================
;; For /AUCTeX-Mode/
(load (concat y-init-path-prefix "emacs-init-auctex"))

;;
;; -------------------- Settings of Modes (cont.) -----------------------
;;
;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;; Settings for /Evil-mode/
(load (concat y-init-path-prefix "emacs-init-evil"))

;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;; Settings for /Icomplete Mode/
;; refer to "emacs-init-archived.el"

;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;; Setting for /neotree/
(require 'neotree)
(global-set-key (kbd "<f6>") 'neotree-toggle)
(setq neo-theme 'nerd)  ;classic, ascii, arrow, nerd
(neotree-dir "~/Public/Dropbox/Academia/Manuscripts")
(neotree-hide)

;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;; Settings for /Org-mode/
(load (concat y-init-path-prefix "emacs-init-orgmode"))

;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;; For /ECB/
;; [SOURCE]: https://github.com/emacsmirror/ecb
;;
;; (add-to-list 'load-path "~/.emacs.d/git/ecb")
;; (require 'ecb)
;; (require 'ecb-autoloads)
;; (setq ecb-windows-width 0.16)
;; (setq ede-project-directories (quote ("~/Workspace/c")))
;; (setq ecb-source-path '(
;;                         "~/Workspace/c/src"
;;                         "~/Workspace/c/include"
;;                         ;"~/tmp/eign"
;;                         ))
;; (setq ecb-tip-of-the-day nil)
;; (setq ecb-primary-secondary-mouse-buttons (quote mouse-1--C-mouse-1))

;; (add-hook 'c-mode-hook 'ecb-activate)
;; (add-hook 'c++-mode-hook 'ecb-activate)
;; (add-hook 'matlab-mode-hook 'ecb-activate)


;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;;
;; Restore Original Key-Bindings
;; 
;; restore "M-c" for capitalize words
(global-set-key (kbd "M-c") 'capitalize-word)
;; open default Dired folders on startup
(y:dired-open-folders-startup)  ; defined in emacs-init-basics.el