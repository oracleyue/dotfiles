(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; Your init file should contain only one such instance.
 ;; '(variable-pitch ((t (:font "Noto Sans-12"))))
 '(default ((t (:font "DejaVu Sans Mono-15")))))    ;; 13/15(mac), 10.5/12(linux)

;; Load paths
(setq y-init-path-prefix "~/.emacs.d/init/")
(add-to-list 'load-path "~/.emacs.d/init")      ; init files
(add-to-list 'load-path "~/.emacs.d/git")    	; pkgs from github

;; Packages
;; (package-initialize)
(require 'emacs-init-packages)

;; Theme
(require 'emacs-init-theme)

;; Basics
(require 'emacs-init-basics)
(require 'emacs-init-edit)

;; Feature Control
(setq y:enable-cedet-semantics nil)     ;; /helm-sematic-or-imenu/, /stickyfunc/
(setq y:enable-function-args nil)       ;; /function-args/ (require semantics)
(setq y:use-direx-or-neotree            ;; enable /direx-jedi/ or/and /neotree/
      '(("direx-jedi" . nil) ("neotree" . t)))
(setq y:enable-google-cpp-style nil)    ;; /google-c-style/
(cond ((string-equal system-type "darwin")       ;; code completion
       (if (string-equal "ac-mode" (daemonp))
           (setq y:code-complete-mode "auto-complete")
         (setq y:code-complete-mode "company")))
      ((string-equal system-type "gnu/linux")
       (setq y:code-complete-mode "company")))

;;
;; Settings of Basic Modes
;;

;; /helm/ and extensions: quick file search
(require 'emacs-init-helm)
(require 'emacs-init-helm-swoop)

;; major modes for document editing
(require 'emacs-init-orgmode)   ;; org-mode
(require 'emacs-init-markdown)  ;; markdown
(require 'emacs-init-auctex)    ;; latex

;; auto-completions
(if (string-equal y:code-complete-mode "company")
    (require 'emacs-init-company)  ;; use /company/
  (require 'emacs-init-ac))        ;; use /auto-complete/

;; directory and buffer explorers
(require 'emacs-init-dired)     ;; directory explorers

;; VIM in emacs
;; (require 'emacs-init-evil)   ;; evil-mode


;;
;; Major Modes for Programming Languages
;;

;; programming environment for /Lisp/
(require 'emacs-init-lisp)

;; programming environment for /HTML, js/
(require 'emacs-init-web)

;; programming environment for /C C++/
(if (string-equal y:code-complete-mode "company")
    ;; (require 'emacs-init-cc-comp)  ;; use /company-clang/
    (org-babel-load-file
     (concat y-init-path-prefix "emacs-init-cc-modern.org"))  ;; use /company-irony/
  (require 'emacs-init-cc-ac))  ;; use /auto-complete/

;; programming environment for /Python/
(if (string-equal y:code-complete-mode "company")
    (require 'emacs-init-py-comp)  ;; use /company/
  (require 'emacs-init-py-ac))  ;; use /auto-complete/

;; programming environment for /R/
(if (string-equal y:code-complete-mode "company")
    (require 'emacs-init-r-comp)  ;; use /company/
  (require 'emacs-init-r-ac))  ;; use /auto-complete/

;; programming environment for /MATLAB/
(require 'emacs-init-matlab)

;; programming environment for /AppleScript/
(autoload 'applescript-mode "applescript-mode"
  "Major mode for editing AppleScript source." t)
(add-to-list 'auto-mode-alist '("\\.applescript$" . applescript-mode))

;; /magit/: version control
(global-set-key (kbd "C-c h g") 'magit-status)

;; /projectile/: project management and helm addons
(require 'emacs-init-helm-proj)

;; /helm-gtags/: code nagivation
(require 'emacs-init-gtags)

;; general programming supports
(require 'emacs-init-prog)




;; Restore default configurations overwritten by other modes
(require 'emacs-init-restore)

;; ----------------------------------------------------------------
;; .emacs ends here.