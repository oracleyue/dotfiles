(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If there is more than one, they won't work right.
 '(column-number-mode t)
 '(fill-column 75)
 '(flymake-google-cpplint-command
   (if (string-equal system-type "darwin")
       "/usr/local/bin/cpplint" "/usr/bin/cpplint"))
 '(inhibit-startup-screen t)
 '(matlab-shell-command-switches (quote ("-nodesktop -nosplash")))
 '(org-file-apps
   (quote
    ((auto-mode . emacs)
     ("\\.mm\\'" . default)
     ("\\.x?html?\\'" . "open %s")
     ("\\.pdf\\'" . "open %s"))))
 '(package-selected-packages
   (quote
    (zeal-at-point yasnippet xcscope stickyfunc-enhance smartparens multiple-cursors matlab-mode magit key-combo js2-mode jedi iedit htmlize helm-swoop helm-projectile helm-gtags google-c-style golden-ratio function-args flymake-google-cpplint expand-region evil-leader etags-table ess emmet-mode csv-mode company-jedi company-c-headers bash-completion auto-complete-clang auto-complete-c-headers)))
 '(scroll-bar-mode nil)
 '(show-paren-mode t)
 '(tab-stop-list
   (quote
    (4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 84 88 92 96 100 104 108 112 116 120)))
 '(tool-bar-mode nil))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If there is more than one, they won't work right.
 '(default ((t (:font "DejaVu Sans Mono-13"))))   ;; 13(mac), 10.5/12(linux)
 )

;; stop emacs automatically editing .emacs
;(setq disabled-command-function nil)
;(setq custom-file "~/.emacs-custom.el")
;(load custom-file 'noerror)

;; frame size
(add-to-list 'default-frame-alist '(width . 96))
(when window-system (set-frame-size (selected-frame) 96 36))  ;(96,36) 33 in Thinkpad

;; encoding
(set-default-coding-systems 'utf-8)
(prefer-coding-system 'utf-8)

;; version settings
(setq ecb-options-version "2.40")
(setq magit-last-seen-setup-instructions "1.4.0") ;disable magit version message

;; paths
(if (string-equal system-type "darwin")		; home path
    (setq y:HomePath "/Users/oracleyue/")
  (setq y:HomePath "/home/oracleyue/"))
(setq y-init-path-prefix "~/.emacs.d/init/")	; init files
(add-to-list 'load-path "~/.emacs.d/git")	; pkgs from github

;; enable clipboard in emacs  (only need for emacs in terminal)
;(setq x-select-enable-clipboard t)

;; mouse control
(setq mouse-wheel-scroll-amount '(2 ((shift) . 1) ((control) . nil)))  ;2 line at a time
(setq mouse-wheel-progressive-speed nil)

;; themes
;; - "solarize"
;(setq frame-background-mode (quote dark))
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/solarized-theme")
(load-theme 'solarized t)
;; - "monokai"
;(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
;(load-theme 'ymonokai t)
;; more customizations
(load (concat y-init-path-prefix "emacs-init-theme"))

;; set the default browser
(if (string-equal system-type "darwin")
    (setq browse-url-browser-function 'browse-url-generic
          browse-url-generic-program (concat y:HomePath "bin/web-browser")) ;use Safari
  (setq browse-url-browser-function 'browse-url-firefox))


;;
;; global variables for configuration loading
;;

;; feature control
;; - enable CEDET features
(if (string-equal system-type "darwin")
    (setq y:flags "no")
  (setq y:flags "yes"))

(setq y-enable-semantic-parse y:flags)     ; for /helm-sematic-or-imenu/
(setq y-enable-function-args-flag y:flags)  ; for /function-args/
(setq y-enable-cedet-source-info y:flags)  ; for /cedet-source-info/

;; - select package for auto-completion
(if (string-equal system-type "darwin")
    (setq y:ac-mode "company")
  (setq y:ac-mode "auto-complete"))

;; suppress redefinition warnings
(setq ad-redefinition-action 'accept)


;;
;; ---------- Settings of Emacs Package System -------------
;;
;; Load packages installed by /homebrew/
(when (string-equal system-type "darwin")
  (let ((default-directory "/usr/local/share/emacs/site-lisp/"))
  (normal-top-level-add-subdirs-to-load-path)))
;; Package Management by ELPA
(when (>= emacs-major-version 24)
    (require 'package)
    (package-initialize)
    ;; list for package-archives
    (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
    (add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)
    ;(add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
    ;(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
    )
;; Install Required Packages (run only once)
;(load (concat y-init-path-prefix "install-init-packages"))
;; ---------------------------------------------------------

;;
;; Configuring /Dired/ in OSX
;;
(cond
 ((string-equal system-type "darwin")
  (setq insert-directory-program "/usr/local/bin/gls")
  ;(setq dired-use-ls-dired nil)
  (setq dired-listing-switches "-ahl --color=always --group-directories-first")
  ))
(add-hook 'dired-load-hook
          (lambda ()
            (require 'dired-x)
            (setq dired-omit-files "^\\.?#\\|^#.*\\|\\.DS_Store$\\|^Icon.*\\|\\..*\\.cache$\\|\\.git\\|\\.dropbox\\|\\.directory")
            (setq dired-omit-extensions (delete ".o" dired-omit-extensions))
            (setq dired-omit-extensions (delete ".so" dired-omit-extensions))
            (setq dired-omit-extensions (delete ".a" dired-omit-extensions))
            (setq dired-omit-extensions (append dired-omit-extensions '(".out" ".synctex.gz" ".url")))))
(add-hook 'dired-mode-hook
          (lambda ()
            (dired-omit-mode 1)))

;;
;; Load basic configurations for Emacs
;;
(load (concat y-init-path-prefix "emacs-init-basics"))



;;
;; ------------------- Settings of Minor Modes -------------------
;;

;; ----------------------------------------------
;; /hl-sexp/: matching a pair of braces and hightlight the contents
(require 'hl-sexp)
  (add-hook 'lisp-mode-hook 'hl-sexp-mode)
  (add-hook 'emacs-lisp-mode-hook 'hl-sexp-mode)

;; ----------------------------------------------
;; Minior modes for auto-completions (+yas, auto-complete ...)
(if (string-equal y:ac-mode "company")
    (load (concat y-init-path-prefix "emacs-init-ac-comp"))  ;; use /company/
  (load (concat y-init-path-prefix "emacs-init-ac")))  ;; use /auto-complete/

;; ----------------------------------------------
;; /smartparens/: insert pairs of parenthesis/brackets
(require 'smartparens-config)
(smartparens-global-mode 1)
(show-smartparens-global-mode +1)

;; ----------------------------------------------
;; /linum/: adding line number on left fringe
;; (global-linum-mode 1)  ; linum-mode causes many bugs: auto-complete popups, orgmode
;; align line numbers to the right + padding
(defun linum-format-func (line)
  (let ((w (length (number-to-string (count-lines (point-min) (point-max))))))
     (propertize (format (format " %%%dd " w) line) 'face 'linum)))
(setq linum-format 'linum-format-func)
;; enable linum-mode
;(add-hook 'emacs-lisp-mode-hook 'linum-mode)
(add-hook 'sh-mode-hook 'linum-mode)
(add-hook 'matlab-mode-hook 'linum-mode)
(add-hook 'python-mode-hook 'linum-mode)
(add-hook 'c-mode-common-hook 'linum-mode)
(add-hook 'ess-mode-hook 'linum-mode)   ; for R
(add-hook 'makefile-gmake-mode-hook 'linum-mode) ; default for gnome
(add-hook 'makefile-bsdmake-mode-hook 'linum-mode) ; default for OS X

;; ----------------------------------------------
;; /bash-completion/: TAB complete alias and functions
(require 'bash-completion)
(bash-completion-setup)

;; ----------------------------------------------
;; /iedit/: edit the same variable everywhere (keystroke "C-c ;")
(require 'iedit)
(when (eq 'ymonokai (car custom-enabled-themes))
  (set-face-attribute 'iedit-occurrence nil
                      :foreground "#272822"
                      :background "#E6DB74"
                      :weight 'normal))

;; ----------------------------------------------
;; /multiple-cursors/: edit with multiple cursors
(require 'multiple-cursors)
;; mark many occurrences in region
(global-set-key (kbd "C-S-l C-S-l") 'mc/edit-lines)  ;; default (C-S-c C-S-c)
;; mark one more occurrence by regexp match
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
;; mouse events
(global-set-key (kbd "C-S-<mouse-1>") 'mc/add-cursor-on-click)
;; others
;(global-set-key (kbd "M-S-SPC") 'set-rectangular-region-anchor)

;; ----------------------------------------------
;; /expand-region/: increase the selected region by semantic units
(require 'expand-region)
(global-set-key (kbd "C-=") 'er/expand-region)

;; ----------------------------------------------
;; Setting for /golden-ratio/
(require 'golden-ratio)
(golden-ratio-mode t)

;; ----------------------------------------------
;; Setting for /Helm/ and extensions
(load (concat y-init-path-prefix "emacs-init-helm"))
(load (concat y-init-path-prefix "emacs-init-helm-swoop"))


;;
;; General Supports for Programming Environments
;;

;; ----------------------------------------------
;; /magit/: version control
(global-set-key (kbd "C-c h g") 'magit-status)

;; ----------------------------------------------
;; /projectile/: project management and helm addons
(load (concat y-init-path-prefix "emacs-init-helm-proj"))

;; ----------------------------------------------
;; Tag Support
;; Note: tag support for C/C++ has been loaded in "emacs-init-cc.el"

;; ----------------------------------------------
;; API Reference Support
;; Integration with /Dash/ for quick refernce (only available for Mac OS X)
(when (string-equal system-type "darwin")
  (require 'dash-at-point)
  (global-set-key (kbd "C-c d") 'dash-at-point) ; default "C-c d", conflicts with /doxyemacs/ and /ropemacs/ rope-show-doc (having been disabled in its python sources)
  ;; (global-set-key "\C-ce" 'dash-at-point-with-docset)
  ; specify docsets to search in different modes
  (set 'dash-at-point-mode-alist
       '((c-mode . "c,gsl,gl4")
         (c++-mode . "cpp,eigen,boost,gsl")
         (python-mode . "python,numpy,scipy,matplotlib,pandas")
         (ess-mode . "r")
         (sh-mode . "bash")
         )))
;; Integration with /Zeal/ for quick refernce (available for Linux)
(when (string-equal system-type "gnu/linux")
  (require 'zeal-at-point)
  (global-set-key (kbd "C-c d") 'zeal-at-point)
  (set 'dash-at-point-mode-alist
       '((c-mode . "c,gsl,gl4")
         (c++-mode . "c++,eigen,boost,gsl")
         (python-mode . "python 2,numpy,scipy,matplotlib,pandas")
         (ess-mode . "r")
         )))

;; ----------------------------------------------
;; /gud/: debugging supports, e.g. gdb, pdb
;; - usages: "M-x pdb", "M-x gud-gdb"
;;           "M-x gdb" then "M-x gdb-many-window", then "b main" "r"
;; - notes: keybindings compatible with JetBrains
(when (string-equal system-type "darwin")
  (setq gdb-non-stop-setting nil))
(global-set-key (kbd "<f7>") 'gud-step);; equiv step in
(global-set-key (kbd "<f8>") 'gud-next) ;; equiv step over
(global-set-key (kbd "<f9>") 'gud-cont) ;; equiv continue
(global-set-key (kbd "S-<f8>") 'gud-finish) ;; equiv step out



;;
;; ------------- Major Modes for Programming Languages -----------------
;;

; ===============================================
;; Programming Environment for /Lisp/
; To make "C-x C-e" pretty-print; output is shown in minibuffer
(global-set-key [remap eval-last-sexp] 'pp-eval-last-sexp)
; To make "M-:" pretty-print; both input and output are in minibuffer
(global-set-key [remap eval-expression] 'pp-eval-expression)
; Use "C-j" in *scratch*; output is in the buffer under the sexp

;; /ParEdit/ mode
;(autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
;(add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
;(add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
;(add-hook 'lisp-mode-hook             #'enable-paredit-mode)
;(add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
;(add-hook 'scheme-mode-hook           #'enable-paredit-mode)

;; For dialect: MIT/GNU /Scheme/
(setq scheme-program-name "/usr/local/bin/mit-scheme")
(require 'xscheme)
;; Usage:
;;  - "M-x run-scheme" to invoke the Scheme process
;;  - "M-o" to send the buffer to the Scheme process

; ===============================================
;; Programming Environment for /HTML, js/
;; candidates: web-mode, emmet-mode, (NOT USED: js2-mode)
(load (concat y-init-path-prefix "emacs-init-web"))

; ===============================================
;; Programming Environment for /C C++/
(if (string-equal y:ac-mode "company")
    (load (concat y-init-path-prefix "emacs-init-cc-comp"))  ;; use /company/
  (load (concat y-init-path-prefix "emacs-init-cc")))  ;; use /auto-complete/

;; enable to fire "C-c C-c" to compile, when in cc-mode buffers
;; OR use projectile compile "C-c p c"
(defun y:set-compile-command ()
  (set (make-local-variable 'compile-command) "cd .. && make -k && cd -"))
(add-hook 'c-mode-hook 'y:set-compile-command)
(add-hook 'c++-mode-hook 'y:set-compile-command)

; ===============================================
;; Programming Environment for /Python/
(if (string-equal y:ac-mode "company")
    (load (concat y-init-path-prefix "emacs-init-py-comp"))  ;; use /company/
  (load (concat y-init-path-prefix "emacs-init-py")))  ;; use /auto-complete/

; ===============================================
;; Programming Environment for /R/
(if (string-equal y:ac-mode "company")
    (load (concat y-init-path-prefix "emacs-init-r-comp"))  ;; use /company/
  (load (concat y-init-path-prefix "emacs-init-r")))  ;; use /auto-complete/

; ===============================================
;; Programming Environment for /MATLAB/
(require 'matlab)
(autoload 'matlab-mode "matlab" "Matlab Editing Mode" t)
(add-to-list 'auto-mode-alist '("\\.m$" . matlab-mode))
(setq matlab-indent-function t)
(setq matlab-shell-command "/usr/local/bin/matlab")
(load-library "matlab-load")
;; functionality extensions
(load (concat y-init-path-prefix "emacs-init-matlab"))
;; enable CEDTE feature support
;(matlab-cedet-setup)

; ===============================================
;; Programming Environment for /AppleScript/
(autoload 'applescript-mode "applescript-mode"
  "Major mode for editing AppleScript source." t)
(add-to-list 'auto-mode-alist '("\\.applescript$" . applescript-mode))



;;
;; ------------------- Major Modes for Document Editing -------------------
;;

; ===============================================
;; Settings of general /text-mode/
(add-hook 'text-mode-hook 'turn-on-auto-fill)
(add-hook 'org-mode-hook 'turn-off-auto-fill)

; ===============================================
;; Settings of /Org-mode/
(load (concat y-init-path-prefix "emacs-init-orgmode"))

; ===============================================
;; /Markdown/: major mode for Markdown
;; Note: require "multimarkdown" or "markdown" in Bash
(autoload 'markdown-mode "markdown-mode"
  "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
(autoload 'gfm-mode "markdown-mode"
  "Major mode for editing GitHub Flavored Markdown files" t)
(add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode))
;; configure commands
(setq markdown-command "/usr/local/bin/multimarkdown")
(setq markdown-open-command "/Users/oracleyue/bin/marked")
;; configure markdown export styles
(setq css-default-path "/Users/oracleyue/.emacs.d/default-css/")
;; (setq url-boostrap-min-css
      ;; "https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css")
(add-hook 'markdown-mode-hook (lambda()
;; (add-to-list 'markdown-css-paths url-boostrap-min-css)  ;; if use bootstrap.min.css online
   (add-to-list 'markdown-css-paths (concat css-default-path "style.css"))
   (add-to-list 'markdown-css-paths (concat css-default-path "bootstrap.min_yeti.css"))))

;; Preview using /livedown.el/  (osx uses "Marked 2.app")
;; Note: require "node + npm" in Bash; and "~$ npm install -g livedown"
;(require 'livedown)
;(setq livedown:autostart nil) ; automatically open preview when opening markdown files
;(setq livedown:open t)        ; automatically open the browser window
;(setq livedown:port 1337)     ; port for livedown server
; ;; use livedown to preview markdown
;(add-hook 'markdown-mode-hook (lambda()
;          (define-key markdown-mode-map (kbd "C-c C-c C-p") 'livedown:preview)))

; ===============================================
;; /AUCTeX/: major mode for LaTeX
(load (concat y-init-path-prefix "emacs-init-auctex"))
;; fix "C-j" for AucTeX mode
;(global-set-key (kbd "C-S-j") 'electric-newline-and-maybe-indent)



;;
;; -------------------------- Obsolete Modes ------------------------
;;

;; ----------------------------------------------
;; Settings for /Evil-mode/
;(load (concat y-init-path-prefix "emacs-init-evil"))

;; ----------------------------------------------
;; For /ECB/
;; [SOURCE]: https://github.com/emacsmirror/ecb
;;
;; (add-to-list 'load-path "~/.emacs.d/git/ecb")
;; (require 'ecb)
;; (require 'ecb-autoloads)
;; (setq ecb-windows-width 0.16)
;; (setq ede-project-directories (quote ("~/Workspace/c")))
;; (setq ecb-source-path '("~/Workspace/c/src"
;;                         "~/Workspace/c/include"))
;; (setq ecb-tip-of-the-day nil)
;; (setq ecb-primary-secondary-mouse-buttons (quote mouse-1--C-mouse-1))
;;
;; (add-hook 'c-mode-hook 'ecb-activate)
;; (add-hook 'c++-mode-hook 'ecb-activate)
;; (add-hook 'matlab-mode-hook 'ecb-activate)



;;
;; ------------------- Keybindings for Terminals -------------------
;;

;(require 'open-next-line)   ;; if not using /emacs-python/
;(global-set-key (kbd "C-o") 'open-next-line)



;;
;; ------------- Restore Original Settings ---------------
;;

;; restore "M-c" for capitalize words
(global-set-key (kbd "M-c") 'capitalize-word)

;; open default Dired folders on startup
(cond ((string-equal system-type "darwin")
       (if (string-equal (expand-file-name "~") "/Users/oracleyue")
           (progn
             (y:dired-open-folders-startup)  ; defined in emacs-init-basics.el
             (y:set-startup-directory))   ; defined in emacs-init-basics.el
         (cd "/Users/oracleyue/Public/Dropbox/Workspace/matlab")))  ; for dark-version
      ((string-equal system-type "gnu/linux")
       (cd "~/tmp")))

;; restore "F10" to open menu bar
(global-set-key (kbd "<f10>") 'menu-bar-open)

;; kill unnecessary buffers
(kill-buffer "*ESS*")
(put 'set-goal-column 'disabled nil)
