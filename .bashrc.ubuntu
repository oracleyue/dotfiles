#
# ~/.bashrc
#

# If not running interactively, don't do anything
[[ $- != *i* ]] && return
    # start tmux on every shell login
    #[[ -z "$TMUX" ]] && exec tmux

# oracleyue-added $PATH
# PATH="$PATH":/opt/android-sdk/tools:/opt/android-sdk/platform-tools
#export TERM=xterm-256color

# oracleyue-configured QT (using qtchooser)
# QT_SELECT=4

# oracleyue-defined alias
alias ls='ls --color=auto'
alias ll='ls --color=auto -Alh'
alias grep='grep --color=auto'
alias egrep='egrep --color=auto'
alias dmesg='dmesg --color=auto'
alias vi='vim'
alias view='vim -R'
alias cp='cp -r -i'
alias du='du -h -d 1'
alias df='df -h'
alias gvim='UBUNTU_MENUPROXY= gvim'
alias emacs='env LC_CTYPE=zh_CN.UTF-8 emacs'
alias rsync='rsync -azP'

# oracleyue-defined commands/functions
function gpgless() { gpg -d "$1" | less ;}
 # atlas: mount the remote folder on atlas server
 #    usage: "atlas [-u]" -  mount/umount by sudo.

# oracleyue-defined environment variables
export EDITOR="vim"
export prj=~/Workspace/matlab/Feng_prj_HPC
export github=~/Workspace/github.com/dotfiles
export gaia=gaia:/work/users/zyue/matlab/Feng_prj_HPC
export ATLAS=~/Public/ATLAS/prj.backup

# oracleyue: Using /less/ colored output
export LESS=-R
export LESS_TERMCAP_me=$(printf '\e[0m')
export LESS_TERMCAP_se=$(printf '\e[0m')
export LESS_TERMCAP_ue=$(printf '\e[0m')
export LESS_TERMCAP_mb=$(printf '\e[1;32m')
export LESS_TERMCAP_md=$(printf '\e[1;34m')
export LESS_TERMCAP_us=$(printf '\e[1;32m')
export LESS_TERMCAP_so=$(printf '\e[1;44;1m')
    # Enable /less/ code syntax coloring
export LESSOPEN="| /usr/bin/source-highlight-esc.sh %s"

# oracleyue: setting default JVM used in MATLAB
export MATLAB_JAVA=/usr/lib/jvm/java-7-openjdk-amd64/jre

# Configurations for /git/
    # For Ubuntu
source /etc/bash_completion.d/git

# ---------------- PS1 config --------------------------------------------
#PS1='\[\033[01;32m\]\u@\h\[\033[01;34m\] \w $\[\033[00m\] '
    # ------------------------------------------------------
    # Color and PS1 config for Bash
    # For detailed explanations, refer to: 
    #   config_Arch.git/_unused/bash.bashrc
    # ------------------------------------------------------

    # If not running interactively, don't do anything!
    [[ $- != *i* ]] && return

    # Enable checkwinsize to check the terminal size when bash regains control.
    shopt -s checkwinsize

    # Enable history appending instead of overwriting.
    shopt -s histappend

    case ${TERM} in
            xterm*|rxvt*|Eterm|aterm|kterm|gnome*)
                    PROMPT_COMMAND=${PROMPT_COMMAND:+$PROMPT_COMMAND; }'printf "\033]0;%s@%s:%s\007" "${USER}" "${HOSTNAME%%.*}" "${PWD/#$HOME/~}"'
                    ;;
            screen*)
                    PROMPT_COMMAND=${PROMPT_COMMAND:+$PROMPT_COMMAND; }'printf "\033_%s@%s:%s\033\\" "${USER}" "${HOSTNAME%%.*}" "${PWD/#$HOME/~}"'
                    ;;
    esac

    # sanitize TERM:
    safe_term=${TERM//[^[:alnum:]]/?}
    match_lhs=""

    [[ -f ~/.dir_colors ]] && match_lhs="${match_lhs}$(<~/.dir_colors)"
    [[ -f /etc/DIR_COLORS ]] && match_lhs="${match_lhs}$(</etc/DIR_COLORS)"
    [[ -z ${match_lhs} ]] \
            && type -P dircolors >/dev/null \
            && match_lhs=$(dircolors --print-database)

    if [[ $'\n'${match_lhs} == *$'\n'"TERM "${safe_term}* ]] ; then
            # we have colors :-)
            # Enable colors for ls, etc. Prefer ~/.dir_colors
            if type -P dircolors >/dev/null ; then
                    if [[ -f ~/.dir_colors ]] ; then
                            eval $(dircolors -b ~/.dir_colors)
                    elif [[ -f /etc/DIR_COLORS ]] ; then
                            eval $(dircolors -b /etc/DIR_COLORS)
                    fi
            fi

            PS1="$(if [[ ${EUID} == 0 ]]; then echo '\[\033[01;31m\]\h'; else echo '\[\033[01;32m\]\u@\h'; fi)\[\033[01;34m\] \w \$([[ \$? != 0 ]] && echo \"\[\033[01;31m\]:(\[\033[01;34m\] \")\\$\[\033[00m\] "

    else
            # show root@ when we do not have colors
            PS1="\u@\h \w \$([[ \$? != 0 ]] && echo \":( \")\$ "
    fi

    PS2="> "
    PS3="> "
    PS4="+ "

    # Try to keep environment pollution down, EPA loves us.
        unset safe_term match_lhs

    # Try to enable the auto-completion (type: "pacman -S bash-completion" to install it).
        [ -r /usr/share/bash-completion/bash_completion ] && . /usr/share/bash-completion/bash_completion

    # Try to enable the "Command not found" hook ("pacman -S pkgfile" to install it).
        [ -r /usr/share/doc/pkgfile/command-not-found.bash ] && . /usr/share/doc/pkgfile/command-not-found.bash
# ------------------------------------------------------------------------

# Added by Canopy installer on 2014-05-09
# VIRTUAL_ENV_DISABLE_PROMPT can be set to '' to make bashprompt show that Canopy is active, otherwise 1
VIRTUAL_ENV_DISABLE_PROMPT=1 source /home/bpf00069/Programs/Enthought/Canopy_64bit/User/bin/activate
